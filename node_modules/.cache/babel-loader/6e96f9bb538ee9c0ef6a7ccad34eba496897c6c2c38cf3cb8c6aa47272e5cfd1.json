{"ast":null,"code":"import { computed, onMounted, reactive, toRefs, watch } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  props: {\n    chat: Object,\n    index: Number\n  },\n  setup(props) {\n    const store = useStore();\n    console.log('question', props.chat);\n    let {\n      id,\n      question,\n      answer\n    } = toRefs(props.chat);\n    console.log('question', question.value, answer.value);\n    let loadInterval = reactive(null);\n    const isBot = computed(() => _.isEmpty(answer));\n    onMounted(() => {\n      console.log('isBot', isBot.value);\n      if (isBot.value === false) {\n        onLoadAnswer();\n        store.dispatch('getResponse', {\n          id: id.value,\n          question: question.value\n        });\n      }\n    });\n    const onLoadAnswer = () => {\n      let bot_text = document.getElementById(`bot${props.index}`);\n      loadInterval = setInterval(() => {\n        bot_text.innerHTML += '.';\n        if (bot_text.textContent === '....') {\n          bot_text.innerHTML = '';\n        }\n      }, 300);\n    };\n    const onSplitBotAnswer = text => {\n      let bot_text = document.getElementById(`bot${props.index}`);\n      loadInterval = setInterval(() => {\n        let index = 0;\n        while (index < text.length) {\n          bot_text.innerHTML += text[index];\n          index++;\n        }\n      }, 300);\n    };\n    watch(answer, (cur, prev) => {\n      if (!_.isEmpty(cur)) {\n        clearInterval(loadInterval);\n        loadInterval = null;\n        onSplitBotAnswer(cur);\n      }\n      console.log('prev', prev);\n    });\n    return {\n      isBot,\n      onLoadAnswer,\n      loadInterval,\n      onSplitBotAnswer\n    };\n  }\n};","map":{"version":3,"mappings":"AAsBA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAACC,KAAI,QAAS,KAAK;AACjE,SAASC,QAAO,QAAS,MAAM;AAC/B,eAAe;EACbC,KAAK,EAAE;IACLC,IAAI,EAAEC,MAAM;IACZC,KAAK,EAACC;EACR,CAAC;EACDC,KAAK,CAACL,KAAK,EAAE;IACX,MAAMM,KAAI,GAAIP,QAAQ,EAAE;IACxBQ,OAAO,CAACC,GAAG,CAAC,UAAU,EAAER,KAAK,CAACC,IAAI;IAClC,IAAI;MAAEQ,EAAE;MAACC,QAAQ;MAAEC;IAAO,IAAId,MAAM,CAACG,KAAK,CAACC,IAAI,CAAC;IAC/CM,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEE,QAAQ,CAACE,KAAK,EAACD,MAAM,CAACC,KAAK;IAGpD,IAAIC,YAAW,GAAIjB,QAAQ,CAAC,IAAI,CAAC;IACjC,MAAMkB,KAAI,GAAIpB,QAAQ,CAAC,MAAMqB,CAAC,CAACC,OAAO,CAACL,MAAM,CAAC,CAAC;IAC/ChB,SAAS,CAAC,MAAM;MACdY,OAAO,CAACC,GAAG,CAAC,OAAO,EAACM,KAAK,CAACF,KAAK;MAC/B,IAAIE,KAAK,CAACF,KAAI,KAAM,KAAK,EAAE;QACzBK,YAAY,EAAE;QACdX,KAAK,CAACY,QAAQ,CAAC,aAAa,EAAC;UAAET,EAAE,EAAEA,EAAE,CAACG,KAAK;UAAEF,QAAQ,EAAEA,QAAQ,CAACE;QAAM,CAAC,CAAC;MAC1E;IACF,CAAC;IAED,MAAMK,YAAW,GAAI,MAAM;MACzB,IAAIE,QAAO,GAAIC,QAAQ,CAACC,cAAc,CAAE,MAAKrB,KAAK,CAACG,KAAM,EAAC,CAAC;MAC3DU,YAAW,GAAIS,WAAW,CAAC,MAAM;QAC/BH,QAAQ,CAACI,SAAQ,IAAK,GAAG;QACzB,IAAIJ,QAAQ,CAACK,WAAU,KAAM,MAAM,EAAE;UACnCL,QAAQ,CAACI,SAAQ,GAAI,EAAE;QACzB;MACF,CAAC,EAAE,GAAG,CAAC;IAET;IAEA,MAAME,gBAAe,GAAKC,IAAI,IAAK;MACjC,IAAIP,QAAO,GAAIC,QAAQ,CAACC,cAAc,CAAE,MAAKrB,KAAK,CAACG,KAAM,EAAC,CAAC;MAC3DU,YAAW,GAAIS,WAAW,CAAC,MAAM;QAC/B,IAAInB,KAAI,GAAI,CAAC;QACb,OAAOA,KAAI,GAAIuB,IAAI,CAACC,MAAM,EAAE;UAC1BR,QAAQ,CAACI,SAAQ,IAAKG,IAAI,CAACvB,KAAK,CAAC;UACjCA,KAAK,EAAE;QACT;MACF,CAAC,EAAC,GAAG;IAEP;IAECL,KAAK,CAACa,MAAM,EAAE,CAACiB,GAAG,EAAEC,IAAI,KAAK;MAC5B,IAAI,CAACd,CAAC,CAACC,OAAO,CAACY,GAAG,CAAC,EAAE;QACnBE,aAAa,CAACjB,YAAY,CAAC;QAC3BA,YAAW,GAAI,IAAI;QACnBY,gBAAgB,CAACG,GAAG,CAAC;MACvB;MACErB,OAAO,CAACC,GAAG,CAAC,MAAM,EAACqB,IAAI;IAC3B,CAAC;IAED,OAAO;MAACf,KAAK;MAACG,YAAY;MAACJ,YAAY;MAACY;IAAgB;EAE1D;AAEF","names":["computed","onMounted","reactive","toRefs","watch","useStore","props","chat","Object","index","Number","setup","store","console","log","id","question","answer","value","loadInterval","isBot","_","isEmpty","onLoadAnswer","dispatch","bot_text","document","getElementById","setInterval","innerHTML","textContent","onSplitBotAnswer","text","length","cur","prev","clearInterval"],"sourceRoot":"","sources":["C:\\Users\\DESKTOP\\study\\tech-bot\\client\\src\\components\\ChatContent.vue"],"sourcesContent":["<template>\r\n  <div class=\"grow\">\r\n      <div class=\"flex w-full text-white p-3 h-max\">\r\n        <div class=\"shrink-0 px-2\">\r\n          <img src=\"../assets/image/profile.png\" class=\"w-12\" id=\"user\"/>\r\n        </div>\r\n        <div class=\"grow-1 break-all bg-gray-700 font-medium p-2 w-full\">\r\n          {{chat.question }}\r\n        </div>\r\n      </div>\r\n      <div class=\"flex w-full h-auto text-white p-3 h-max\">\r\n        <div class=\"grow-1 break-all bg-sky-600 font-medium p-2 w-full\" :id=\"`bot${index}`\">\r\n        \r\n        </div>\r\n         <div class=\"shrink-0 px-2\">\r\n          <img src=\"../assets/image/robot.png\" class=\"w-12\" />\r\n        </div>\r\n      </div>\r\n     </div> \r\n</template>\r\n\r\n<script>\r\nimport { computed, onMounted, reactive, toRefs,watch } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nexport default {\r\n  props: {\r\n    chat: Object,\r\n    index:Number\r\n  },\r\n  setup(props) {\r\n    const store = useStore();\r\n    console.log('question', props.chat)\r\n    let { id,question, answer } = toRefs(props.chat);\r\n     console.log('question', question.value,answer.value)\r\n\r\n     \r\n    let loadInterval = reactive(null);\r\n    const isBot = computed(() => _.isEmpty(answer));\r\n    onMounted(() => {\r\n      console.log('isBot',isBot.value)\r\n      if (isBot.value === false) {  \r\n        onLoadAnswer();\r\n        store.dispatch('getResponse',{ id: id.value, question: question.value });\r\n      } \r\n    })\r\n    \r\n    const onLoadAnswer = () => {\r\n      let bot_text = document.getElementById(`bot${props.index}`);\r\n      loadInterval = setInterval(() => {\r\n        bot_text.innerHTML += '.';\r\n        if (bot_text.textContent === '....') {\r\n          bot_text.innerHTML = '';\r\n        }\r\n      }, 300);\r\n      \r\n    }\r\n\r\n    const onSplitBotAnswer = (text) => {\r\n      let bot_text = document.getElementById(`bot${props.index}`);\r\n      loadInterval = setInterval(() => {\r\n        let index = 0;\r\n        while (index < text.length) {\r\n          bot_text.innerHTML += text[index];\r\n          index++;\r\n        }\r\n      },300)\r\n    \r\n    }\r\n\r\n     watch(answer, (cur, prev) => {\r\n      if (!_.isEmpty(cur)) {\r\n        clearInterval(loadInterval);\r\n        loadInterval = null;\r\n        onSplitBotAnswer(cur);\r\n      }\r\n        console.log('prev',prev)\r\n    })\r\n\r\n    return {isBot,onLoadAnswer,loadInterval,onSplitBotAnswer}\r\n\r\n  },\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}