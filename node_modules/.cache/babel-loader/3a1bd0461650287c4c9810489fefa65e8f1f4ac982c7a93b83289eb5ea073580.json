{"ast":null,"code":"import { ref, computed } from \"vue\";\n// import { useStore } from \"vuex\";\n// import generateUniqueId from \"../common/uniqueId\";\nimport ChatUserError from \"./ChatUserError.vue\";\nexport default {\n  emits: [\"settingUserText\"],\n  components: {\n    ChatUserError\n  },\n  setup(props, {\n    emit\n  }) {\n    // const store = useStore();\n\n    let searchText = ref(\"\");\n    let setError = ref(\"\");\n    const isError = computed(() => !_.isEmpty(setError));\n    const setSearchText = e => {\n      searchText = e.target.value;\n    };\n    const searchResult = text => {\n      if (_.isEmpty(text)) {\n        setError.value = \"질문을 입력해주세요\";\n        return;\n      }\n\n      //   store.commit(\n      //     \"setUserText\",\n      //     { id: generateUniqueId(), question: text, answer: \"\" },\n      //     { root: true }\n      //   );\n\n      emit(\"settingUserText\", text);\n      searchText.value = \"\";\n      setError.value = \"\";\n      document.querySelector(\"#prompt\").value = \"\";\n    };\n    const clearError = () => {\n      setError.value = \"\";\n    };\n    return {\n      searchText,\n      setSearchText,\n      searchResult,\n      setError,\n      isError,\n      clearError\n    };\n  }\n};","map":{"version":3,"mappings":"AA6BA,SAASA,GAAG,EAAEC,QAAO,QAAS,KAAK;AACnC;AACA;AACA,OAAOC,aAAY,MAAO,qBAAqB;AAE/C,eAAe;EACbC,KAAK,EAAE,CAAC,iBAAiB,CAAC;EAC1BC,UAAU,EAAE;IAAEF;EAAc,CAAC;EAC7BG,KAAK,CAACC,KAAK,EAAE;IAAEC;EAAK,CAAC,EAAE;IACrB;;IAEA,IAAIC,UAAS,GAAIR,GAAG,CAAC,EAAE,CAAC;IACxB,IAAIS,QAAO,GAAIT,GAAG,CAAC,EAAE,CAAC;IACtB,MAAMU,OAAM,GAAIT,QAAQ,CAAC,MAAM,CAACU,CAAC,CAACC,OAAO,CAACH,QAAQ,CAAC,CAAC;IAEpD,MAAMI,aAAY,GAAKC,CAAC,IAAK;MAC3BN,UAAS,GAAIM,CAAC,CAACC,MAAM,CAACC,KAAK;IAC7B,CAAC;IAED,MAAMC,YAAW,GAAKC,IAAI,IAAK;MAC7B,IAAIP,CAAC,CAACC,OAAO,CAACM,IAAI,CAAC,EAAE;QACnBT,QAAQ,CAACO,KAAI,GAAI,YAAY;QAC7B;MACF;;MAEA;MACA;MACA;MACA;MACA;;MAEAT,IAAI,CAAC,iBAAiB,EAAEW,IAAI,CAAC;MAC7BV,UAAU,CAACQ,KAAI,GAAI,EAAE;MAErBP,QAAQ,CAACO,KAAI,GAAI,EAAE;MACnBG,QAAQ,CAACC,aAAa,CAAC,SAAS,CAAC,CAACJ,KAAI,GAAI,EAAE;IAC9C,CAAC;IAED,MAAMK,UAAS,GAAI,MAAM;MACvBZ,QAAQ,CAACO,KAAI,GAAI,EAAE;IACrB,CAAC;IACD,OAAO;MACLR,UAAU;MACVK,aAAa;MACbI,YAAY;MACZR,QAAQ;MACRC,OAAO;MACPW;IACF,CAAC;EACH;AACF,CAAC","names":["ref","computed","ChatUserError","emits","components","setup","props","emit","searchText","setError","isError","_","isEmpty","setSearchText","e","target","value","searchResult","text","document","querySelector","clearError"],"sourceRoot":"","sources":["C:\\Users\\DESKTOP\\study\\tech-bot\\client\\src\\components\\ChatInput.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"flex bg-white w-full h-14 grow-0 p-2\">\r\n      <div class=\"flex grow\">\r\n        <label for=\"prompt\"></label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"prompt\"\r\n          @keyup.enter=\"searchResult(searchText)\"\r\n          v-model=\"searchText\"\r\n          class=\"block w-full p-4 text-gray-900 rounded-lg bg-gray-50 sm:text-md dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 outline-none\"\r\n        />\r\n      </div>\r\n      <div class=\"flex float-left grow-0\">\r\n        <button\r\n          class=\"h-10 px-5 text-indigo-100 transition-colors duration-150 bg-gray-500 rounded-lg focus:shadow-outline hover:bg-indigo-800\"\r\n          @click=\"searchResult(searchText)\"\r\n        >\r\n          submit\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <template v-if=\"isError\">\r\n      <ChatUserError :setError=\"setError\" @close=\"clearError\" />\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed } from \"vue\";\r\n// import { useStore } from \"vuex\";\r\n// import generateUniqueId from \"../common/uniqueId\";\r\nimport ChatUserError from \"./ChatUserError.vue\";\r\n\r\nexport default {\r\n  emits: [\"settingUserText\"],\r\n  components: { ChatUserError },\r\n  setup(props, { emit }) {\r\n    // const store = useStore();\r\n\r\n    let searchText = ref(\"\");\r\n    let setError = ref(\"\");\r\n    const isError = computed(() => !_.isEmpty(setError));\r\n\r\n    const setSearchText = (e) => {\r\n      searchText = e.target.value;\r\n    };\r\n\r\n    const searchResult = (text) => {\r\n      if (_.isEmpty(text)) {\r\n        setError.value = \"질문을 입력해주세요\";\r\n        return;\r\n      }\r\n\r\n      //   store.commit(\r\n      //     \"setUserText\",\r\n      //     { id: generateUniqueId(), question: text, answer: \"\" },\r\n      //     { root: true }\r\n      //   );\r\n\r\n      emit(\"settingUserText\", text);\r\n      searchText.value = \"\";\r\n\r\n      setError.value = \"\";\r\n      document.querySelector(\"#prompt\").value = \"\";\r\n    };\r\n\r\n    const clearError = () => {\r\n      setError.value = \"\";\r\n    };\r\n    return {\r\n      searchText,\r\n      setSearchText,\r\n      searchResult,\r\n      setError,\r\n      isError,\r\n      clearError,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}