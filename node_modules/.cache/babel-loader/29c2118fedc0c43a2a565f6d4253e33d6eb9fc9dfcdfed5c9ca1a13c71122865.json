{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from '../assets/image/profile.png';\nimport _imports_1 from '../assets/image/robot.png';\nconst _hoisted_1 = {\n  class: \"grow\"\n};\nconst _hoisted_2 = {\n  class: \"flex w-full text-white p-3 h-max\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"shrink-0 px-3 py-2\"\n}, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  class: \"w-12\",\n  id: \"user\"\n})], -1 /* HOISTED */);\nconst _hoisted_4 = {\n  class: \"grow-1 break-all bg-gray-700 font-medium p-2 w-full h-20 rounded-br-lg rounded-tr-lg\"\n};\nconst _hoisted_5 = {\n  class: \"flex w-full h-auto text-white p-3 h-max\"\n};\nconst _hoisted_6 = [\"id\"];\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"shrink-0 px-2\"\n}, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_1,\n  class: \"w-12\"\n})], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createElementVNode(\"div\", _hoisted_4, _toDisplayString($props.chat.question), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", {\n    class: \"grow-1 break-all bg-sky-600 font-medium p-2 w-full h-20\",\n    id: `bot${$props.index}`\n  }, null, 8 /* PROPS */, _hoisted_6), _hoisted_7])]);\n}","map":{"version":3,"mappings":";OAIaA,UAAiC;OAcjCC,UAA+B;;EAjBrCC,KAAK,EAAC;AAAM;;EACVA,KAAK,EAAC;AAAkC;gCAC3CC,oBAEM;EAFDD,KAAK,EAAC;AAAoB,iBAC7BC,oBAAgE;EAA3DC,GAAiC,EAAjCJ,UAAiC;EAACE,KAAK,EAAC,MAAM;EAACG,EAAE,EAAC;;;EAGvDH,KAAK,EAAC;AAAsF;;EAK3FA,KAAK,EAAC;AAAyC;;gCAKlDC,oBAEM;EAFDD,KAAK,EAAC;AAAe,iBACxBC,oBAAoD;EAA/CC,GAA+B,EAA/BH,UAA+B;EAACC,KAAK,EAAC;;;;uBAjBjDI,oBAoBM,OApBNC,UAoBM,GAnBJJ,oBASM,OATNK,UASM,GARJC,UAEM,EACNN,oBAIM,OAJNO,UAIM,mBADDC,WAAI,CAACC,QAAQ,oBAGpBT,oBAQM,OARNU,UAQM,GAPJV,oBAGO;IAFLD,KAAK,EAAC,yDAAyD;IAC9DG,EAAE,QAAQM,YAAK;uCAElBG,UAEM","names":["_imports_0","_imports_1","class","_createElementVNode","src","id","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","$props","question","_hoisted_5","_hoisted_7"],"sourceRoot":"","sources":["C:\\Users\\DESKTOP\\study\\tech-bot\\client\\src\\components\\ChatContent.vue"],"sourcesContent":["<template>\r\n  <div class=\"grow\">\r\n    <div class=\"flex w-full text-white p-3 h-max\">\r\n      <div class=\"shrink-0 px-3 py-2\">\r\n        <img src=\"../assets/image/profile.png\" class=\"w-12\" id=\"user\" />\r\n      </div>\r\n      <div\r\n        class=\"grow-1 break-all bg-gray-700 font-medium p-2 w-full h-20 rounded-br-lg rounded-tr-lg\"\r\n      >\r\n        {{ chat.question }}\r\n      </div>\r\n    </div>\r\n    <div class=\"flex w-full h-auto text-white p-3 h-max\">\r\n      <div\r\n        class=\"grow-1 break-all bg-sky-600 font-medium p-2 w-full h-20\"\r\n        :id=\"`bot${index}`\"\r\n      ></div>\r\n      <div class=\"shrink-0 px-2\">\r\n        <img src=\"../assets/image/robot.png\" class=\"w-12\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { computed, onMounted, ref, toRefs, watch } from \"vue\";\r\nexport default {\r\n  props: {\r\n    chat: Object,\r\n    index: Number,\r\n  },\r\n  setup(props, context) {\r\n    console.log(\"question\", props.chat);\r\n    let { id, question, answer } = toRefs(props.chat);\r\n    console.log(\"question\", question.value, answer.value);\r\n\r\n    let loadInterval = ref(null);\r\n    const isBot = computed(() => _.isEmpty(answer));\r\n    onMounted(() => {\r\n      console.log(\"isBot\", isBot.value);\r\n      if (isBot.value === false) {\r\n        onLoadAnswer();\r\n        context.emit(\"settingQnA\", { id: id.value, question: question.value });\r\n      }\r\n    });\r\n\r\n    const onLoadAnswer = () => {\r\n      let bot_text = document.getElementById(`bot${props.index}`);\r\n      loadInterval = setInterval(() => {\r\n        bot_text.innerHTML += \".\";\r\n        if (bot_text.textContent === \"....\") {\r\n          bot_text.innerHTML = \"\";\r\n        }\r\n      }, 100);\r\n    };\r\n\r\n    const onSplitBotAnswer = (text) => {\r\n      let bot_text = document.getElementById(`bot${props.index}`);\r\n      let index = 0;\r\n   \r\n      loadInterval = setInterval(() => {\r\n        if (index < text.length) {\r\n          console.log(\"text\", text[index]);\r\n          bot_text.innerHTML += text[index];\r\n          index++;\r\n        } else {\r\n          clearInterval(loadInterval);\r\n          loadInterval = null;\r\n        }\r\n      }, 100);\r\n    };\r\n\r\n    watch(answer, (cur, prev) => {\r\n      if (!_.isEmpty(cur)) {\r\n        clearInterval(loadInterval);\r\n        loadInterval = null;\r\n        onSplitBotAnswer(cur);\r\n      }\r\n      console.log(\"prev\", prev);\r\n    });\r\n\r\n    return { isBot, onLoadAnswer, loadInterval, onSplitBotAnswer };\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}