{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"bg-slate-800 w-full md:w-3/4 rounded-md h-5/6 flex flex-col drop-shadow-xl\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"text-sky-500 text-xl font-semibold w-full p-3 h-20 border-b-2 flex\\\"><p class=\\\"grow w-5/6 flex items-center\\\">CodeBot</p><div class=\\\"float-left grow-0 justify-center items-center flex space-x-3\\\"><div class=\\\"w-2 h-2 bg-sky-500 rounded-full\\\"></div><div class=\\\"w-2 h-2 bg-sky-500 rounded-full\\\"></div><div class=\\\"w-2 h-2 bg-sky-500 rounded-full\\\"></div></div></div>\", 1);\nconst _hoisted_3 = {\n  class: \"h-full overflow-y-auto\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_chat_content = _resolveComponent(\"chat-content\");\n  const _component_chat_input = _resolveComponent(\"chat-input\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\"header\"), _hoisted_2, _createCommentVNode(\"chat\"), _createElementVNode(\"div\", _hoisted_3, [$setup.isExist ? (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 0\n  }, _renderList($setup.chatList, (chat, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createVNode(_component_chat_content, {\n      chat: chat,\n      index: index,\n      onSettingQnA: $setup.getBotAnswer\n    }, null, 8 /* PROPS */, [\"chat\", \"index\", \"onSettingQnA\"])]);\n  }), 128 /* KEYED_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\"input\"), _createVNode(_component_chat_input, {\n    onSettingUserText: $setup.getUserText\n  }, null, 8 /* PROPS */, [\"onSettingUserText\"])]);\n}","map":{"version":3,"mappings":";;EAEIA,KAAK,EAAC;AAA4E;;;EAc7EA,KAAK,EAAC;AAAwB;;;;uBAfrCC,oBA4BM,OA5BNC,UA4BM,GAzBJC,6BAAa,EACbC,UASM,EACND,2BAAW,EACXE,oBAUM,OAVNC,UAUM,GATYC,cAAO,sBACrBN,oBAMMO;IAAAC;EAAA,eANuBF,eAAQ,GAAxBG,IAAI,EAAEC,KAAK;yBAAxBV,oBAMM;MANkCQ,GAAG,EAAEE;IAAK,IAChDC,aAIEC;MAHCH,IAAI,EAAEA,IAAI;MACVC,KAAK,EAAEA,KAAK;MACZG,YAAU,EAAEP;;wEAKrBJ,4BAAY,EACZS,aAA6CG;IAAhCC,iBAAe,EAAET;EAAW","names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","_createElementVNode","_hoisted_3","$setup","_Fragment","key","chat","index","_createVNode","_component_chat_content","onSettingQnA","_component_chat_input","onSettingUserText"],"sourceRoot":"","sources":["C:\\Users\\DESKTOP\\study\\tech-bot\\client\\src\\components\\ChatFrame.vue"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"bg-slate-800 w-full md:w-3/4 rounded-md h-5/6 flex flex-col drop-shadow-xl\"\r\n  >\r\n    <!--header-->\r\n    <div\r\n      class=\"text-sky-500 text-xl font-semibold w-full p-3 h-20 border-b-2 flex\"\r\n    >\r\n      <p class=\"grow w-5/6 flex items-center\">CodeBot</p>\r\n      <div class=\"float-left grow-0 justify-center items-center flex space-x-3\">\r\n        <div class=\"w-2 h-2 bg-sky-500 rounded-full\"></div>\r\n        <div class=\"w-2 h-2 bg-sky-500 rounded-full\"></div>\r\n        <div class=\"w-2 h-2 bg-sky-500 rounded-full\"></div>\r\n      </div>\r\n    </div>\r\n    <!--chat-->\r\n    <div class=\"h-full overflow-y-auto\">\r\n      <template v-if=\"isExist\">\r\n        <div v-for=\"(chat, index) in chatList\" :key=\"index\">\r\n          <chat-content\r\n            :chat=\"chat\"\r\n            :index=\"index\"\r\n            @settingQnA=\"getBotAnswer\"\r\n          />\r\n        </div>\r\n      </template>\r\n    </div>\r\n    <!--input-->\r\n    <chat-input @settingUserText=\"getUserText\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ChatContent from \"./ChatContent.vue\";\r\nimport ChatInput from \"./ChatInput.vue\";\r\nimport { computed } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport generateUniqueId from \"../common/uniqueId\";\r\nexport default {\r\n  components: { ChatContent, ChatInput },\r\n  setup() {\r\n    const store = useStore();\r\n\r\n    const getBotAnswer = (params) => {\r\n      let { id, question } = params;\r\n\r\n      store.dispatch(\"getResponse\", {\r\n        id: id,\r\n        question: question,\r\n      });\r\n    };\r\n\r\n    const getUserText = (param) => {\r\n      store.commit(\r\n        \"setUserText\",\r\n        { id: generateUniqueId(), question: param, answer: \"\" },\r\n        { root: true }\r\n      );\r\n    };\r\n\r\n    const isExist = computed(() => !_.isEmpty(chatList.value));\r\n    const chatList = computed(() => store.getters.getChatContent);\r\n    return { chatList, isExist, getBotAnswer, getUserText };\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}