{"ast":null,"code":"import { createElementVNode as _createElementVNode, withKeys as _withKeys, vModelText as _vModelText, withDirectives as _withDirectives, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"flex bg-white w-full h-14 grow-0 p-2\"\n};\nconst _hoisted_2 = {\n  class: \"flex grow\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"prompt\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_4 = {\n  class: \"flex float-left grow-0\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ChatUserError = _resolveComponent(\"ChatUserError\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"prompt\",\n    onKeyup: _cache[0] || (_cache[0] = _withKeys($event => $setup.searchResult($setup.searchText), [\"enter\"])),\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.searchText = $event),\n    class: \"block w-full p-4 text-gray-900 rounded-lg bg-gray-50 sm:text-md dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 outline-none\"\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $setup.searchText]])]), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    class: \"h-10 px-5 text-indigo-100 transition-colors duration-150 bg-gray-500 rounded-lg focus:shadow-outline hover:bg-indigo-800\",\n    onClick: _cache[2] || (_cache[2] = $event => $setup.searchResult($setup.searchText))\n  }, \" submit \")])]), $setup.isError ? (_openBlock(), _createBlock(_component_ChatUserError, {\n    key: 0,\n    setError: $setup.setError,\n    onClose: $setup.clearError\n  }, null, 8 /* PROPS */, [\"setError\", \"onClose\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;EAESA,KAAK,EAAC;AAAsC;;EAC1CA,KAAK,EAAC;AAAW;gCACpBC,oBAA4B;EAArBC,GAAG,EAAC;AAAQ;;EAShBF,KAAK,EAAC;AAAwB;;;uBAZvCG,oBAwBM,cAvBJF,oBAmBM,OAnBNG,UAmBM,GAlBJH,oBASM,OATNI,UASM,GARJC,UAA4B,kBAC5BL,oBAME;IALAM,IAAI,EAAC,MAAM;IACXC,EAAE,EAAC,QAAQ;IACVC,OAAK,gDAAQC,mBAAY,CAACA,iBAAU;+DAC5BA,iBAAU;IACnBV,KAAK,EAAC;iEADGU,iBAAU,OAIvBT,oBAOM,OAPNU,UAOM,GANJV,oBAKS;IAJPD,KAAK,EAAC,0HAA0H;IAC/HY,OAAK,sCAAEF,mBAAY,CAACA,iBAAU;KAChC,UAED,OAGYA,cAAO,kBACrBG,aAA0DC;;IAA1CC,QAAQ,EAAEL,eAAQ;IAAGM,OAAK,EAAEN","names":["class","_createElementVNode","for","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","type","id","onKeyup","$setup","_hoisted_4","onClick","_createBlock","_component_ChatUserError","setError","onClose"],"sourceRoot":"","sources":["C:\\Users\\DESKTOP\\study\\tech-bot\\client\\src\\components\\ChatInput.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"flex bg-white w-full h-14 grow-0 p-2\">\r\n      <div class=\"flex grow\">\r\n        <label for=\"prompt\"></label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"prompt\"\r\n          @keyup.enter=\"searchResult(searchText)\"\r\n          v-model=\"searchText\"\r\n          class=\"block w-full p-4 text-gray-900 rounded-lg bg-gray-50 sm:text-md dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 outline-none\"\r\n        />\r\n      </div>\r\n      <div class=\"flex float-left grow-0\">\r\n        <button\r\n          class=\"h-10 px-5 text-indigo-100 transition-colors duration-150 bg-gray-500 rounded-lg focus:shadow-outline hover:bg-indigo-800\"\r\n          @click=\"searchResult(searchText)\"\r\n        >\r\n          submit\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <template v-if=\"isError\">\r\n      <ChatUserError :setError=\"setError\" @close=\"clearError\" />\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed } from \"vue\";\r\n// import { useStore } from \"vuex\";\r\n// import generateUniqueId from \"../common/uniqueId\";\r\nimport ChatUserError from \"./ChatUserError.vue\";\r\n\r\nexport default {\r\n  emits: [\"settingUserText\"],\r\n  components: { ChatUserError },\r\n  setup(props, { emit }) {\r\n    // const store = useStore();\r\n\r\n    let searchText = ref(\"\");\r\n    let setError = ref(\"\");\r\n    const isError = computed(() => !_.isEmpty(setError));\r\n\r\n    const setSearchText = (e) => {\r\n      searchText = e.target.value;\r\n    };\r\n\r\n    const searchResult = (text) => {\r\n      if (_.isEmpty(text)) {\r\n        setError.value = \"질문을 입력해주세요\";\r\n        return;\r\n      }\r\n\r\n      //   store.commit(\r\n      //     \"setUserText\",\r\n      //     { id: generateUniqueId(), question: text, answer: \"\" },\r\n      //     { root: true }\r\n      //   );\r\n\r\n      emit(\"settingUserText\", text);\r\n      searchText.value = \"\";\r\n\r\n      setError.value = \"\";\r\n      document.querySelector(\"#prompt\").value = \"\";\r\n    };\r\n\r\n    const clearError = () => {\r\n      setError.value = \"\";\r\n    };\r\n    return {\r\n      searchText,\r\n      setSearchText,\r\n      searchResult,\r\n      setError,\r\n      isError,\r\n      clearError,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}