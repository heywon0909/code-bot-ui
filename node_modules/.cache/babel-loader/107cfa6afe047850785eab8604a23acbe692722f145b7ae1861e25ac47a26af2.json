{"ast":null,"code":"import { computed, onMounted, ref, toRefs, watch } from \"vue\";\nexport default {\n  props: {\n    chat: Object,\n    index: Number\n  },\n  setup(props, context) {\n    console.log(\"question\", props.chat);\n    let {\n      id,\n      question,\n      answer\n    } = toRefs(props.chat);\n    console.log(\"question\", question.value, answer.value);\n    let loadInterval = ref(null);\n    const isBot = computed(() => _.isEmpty(answer));\n    onMounted(() => {\n      console.log(\"isBot\", isBot.value);\n      if (isBot.value === false) {\n        onLoadAnswer();\n        context.emit(\"settingQnA\", {\n          id: id.value,\n          question: question.value\n        });\n      }\n    });\n    const onLoadAnswer = () => {\n      let bot_text = document.getElementById(`bot${props.index}`);\n      loadInterval = setInterval(() => {\n        bot_text.innerHTML += \".\";\n        if (bot_text.textContent === \"....\") {\n          bot_text.innerHTML = \"\";\n        }\n      }, 300);\n    };\n    const onSplitBotAnswer = text => {\n      let bot_text = document.getElementById(`bot${props.index}`);\n      let index = 0;\n      loadInterval = setInterval(() => {\n        if (index < text.length) {\n          console.log(\"text\", text[index]);\n          bot_text.innerHTML += text[index];\n          index++;\n        } else {\n          clearInterval(loadInterval);\n          loadInterval = null;\n        }\n      }, 100);\n    };\n    watch(answer, (cur, prev) => {\n      if (!_.isEmpty(cur)) {\n        clearInterval(loadInterval);\n        loadInterval = null;\n        onSplitBotAnswer(cur);\n      }\n      console.log(\"prev\", prev);\n    });\n    return {\n      isBot,\n      onLoadAnswer,\n      loadInterval,\n      onSplitBotAnswer\n    };\n  }\n};","map":{"version":3,"mappings":"AAyBA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,GAAG,EAAEC,MAAM,EAAEC,KAAI,QAAS,KAAK;AAC7D,eAAe;EACbC,KAAK,EAAE;IACLC,IAAI,EAAEC,MAAM;IACZC,KAAK,EAAEC;EACT,CAAC;EACDC,KAAK,CAACL,KAAK,EAAEM,OAAO,EAAE;IACpBC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAER,KAAK,CAACC,IAAI,CAAC;IACnC,IAAI;MAAEQ,EAAE;MAAEC,QAAQ;MAAEC;IAAO,IAAIb,MAAM,CAACE,KAAK,CAACC,IAAI,CAAC;IACjDM,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEE,QAAQ,CAACE,KAAK,EAAED,MAAM,CAACC,KAAK,CAAC;IAErD,IAAIC,YAAW,GAAIhB,GAAG,CAAC,IAAI,CAAC;IAC5B,MAAMiB,KAAI,GAAInB,QAAQ,CAAC,MAAMoB,CAAC,CAACC,OAAO,CAACL,MAAM,CAAC,CAAC;IAC/Cf,SAAS,CAAC,MAAM;MACdW,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEM,KAAK,CAACF,KAAK,CAAC;MACjC,IAAIE,KAAK,CAACF,KAAI,KAAM,KAAK,EAAE;QACzBK,YAAY,EAAE;QACdX,OAAO,CAACY,IAAI,CAAC,YAAY,EAAE;UAAET,EAAE,EAAEA,EAAE,CAACG,KAAK;UAAEF,QAAQ,EAAEA,QAAQ,CAACE;QAAM,CAAC,CAAC;MACxE;IACF,CAAC,CAAC;IAEF,MAAMK,YAAW,GAAI,MAAM;MACzB,IAAIE,QAAO,GAAIC,QAAQ,CAACC,cAAc,CAAE,MAAKrB,KAAK,CAACG,KAAM,EAAC,CAAC;MAC3DU,YAAW,GAAIS,WAAW,CAAC,MAAM;QAC/BH,QAAQ,CAACI,SAAQ,IAAK,GAAG;QACzB,IAAIJ,QAAQ,CAACK,WAAU,KAAM,MAAM,EAAE;UACnCL,QAAQ,CAACI,SAAQ,GAAI,EAAE;QACzB;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC;IAED,MAAME,gBAAe,GAAKC,IAAI,IAAK;MACjC,IAAIP,QAAO,GAAIC,QAAQ,CAACC,cAAc,CAAE,MAAKrB,KAAK,CAACG,KAAM,EAAC,CAAC;MAC3D,IAAIA,KAAI,GAAI,CAAC;MAEbU,YAAW,GAAIS,WAAW,CAAC,MAAM;QAC/B,IAAInB,KAAI,GAAIuB,IAAI,CAACC,MAAM,EAAE;UACvBpB,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEkB,IAAI,CAACvB,KAAK,CAAC,CAAC;UAChCgB,QAAQ,CAACI,SAAQ,IAAKG,IAAI,CAACvB,KAAK,CAAC;UACjCA,KAAK,EAAE;QACT,OAAO;UACLyB,aAAa,CAACf,YAAY,CAAC;UAC3BA,YAAW,GAAI,IAAI;QACrB;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC;IAEDd,KAAK,CAACY,MAAM,EAAE,CAACkB,GAAG,EAAEC,IAAI,KAAK;MAC3B,IAAI,CAACf,CAAC,CAACC,OAAO,CAACa,GAAG,CAAC,EAAE;QACnBD,aAAa,CAACf,YAAY,CAAC;QAC3BA,YAAW,GAAI,IAAI;QACnBY,gBAAgB,CAACI,GAAG,CAAC;MACvB;MACAtB,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEsB,IAAI,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO;MAAEhB,KAAK;MAAEG,YAAY;MAAEJ,YAAY;MAAEY;IAAiB,CAAC;EAChE;AACF,CAAC","names":["computed","onMounted","ref","toRefs","watch","props","chat","Object","index","Number","setup","context","console","log","id","question","answer","value","loadInterval","isBot","_","isEmpty","onLoadAnswer","emit","bot_text","document","getElementById","setInterval","innerHTML","textContent","onSplitBotAnswer","text","length","clearInterval","cur","prev"],"sourceRoot":"","sources":["C:\\Users\\DESKTOP\\study\\tech-bot\\client\\src\\components\\ChatContent.vue"],"sourcesContent":["<template>\r\n  <div class=\"grow\">\r\n    <div class=\"flex w-full text-white p-3 h-max\">\r\n      <div class=\"shrink-0 px-3 py-2\">\r\n        <img src=\"../assets/image/profile.png\" class=\"w-12\" id=\"user\" />\r\n      </div>\r\n      <div\r\n        class=\"grow-1 break-all bg-gray-700 font-medium p-2 w-full h-full rounded-br-lg rounded-tr-lg\"\r\n      >\r\n        {{ chat.question }}\r\n      </div>\r\n    </div>\r\n    <div class=\"flex w-full h-auto text-white p-3 py-2 h-max\">\r\n      <div\r\n        class=\"grow-1 break-all bg-sky-600 font-medium p-2 w-full min-h-min rounded-bl-lg rounded-tl-lg\"\r\n        :id=\"`bot${index}`\"\r\n      ></div>\r\n      <div class=\"shrink-0 px-2\">\r\n        <img src=\"../assets/image/robot.png\" class=\"w-12\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { computed, onMounted, ref, toRefs, watch } from \"vue\";\r\nexport default {\r\n  props: {\r\n    chat: Object,\r\n    index: Number,\r\n  },\r\n  setup(props, context) {\r\n    console.log(\"question\", props.chat);\r\n    let { id, question, answer } = toRefs(props.chat);\r\n    console.log(\"question\", question.value, answer.value);\r\n\r\n    let loadInterval = ref(null);\r\n    const isBot = computed(() => _.isEmpty(answer));\r\n    onMounted(() => {\r\n      console.log(\"isBot\", isBot.value);\r\n      if (isBot.value === false) {\r\n        onLoadAnswer();\r\n        context.emit(\"settingQnA\", { id: id.value, question: question.value });\r\n      }\r\n    });\r\n\r\n    const onLoadAnswer = () => {\r\n      let bot_text = document.getElementById(`bot${props.index}`);\r\n      loadInterval = setInterval(() => {\r\n        bot_text.innerHTML += \".\";\r\n        if (bot_text.textContent === \"....\") {\r\n          bot_text.innerHTML = \"\";\r\n        }\r\n      }, 300);\r\n    };\r\n\r\n    const onSplitBotAnswer = (text) => {\r\n      let bot_text = document.getElementById(`bot${props.index}`);\r\n      let index = 0;\r\n   \r\n      loadInterval = setInterval(() => {\r\n        if (index < text.length) {\r\n          console.log(\"text\", text[index]);\r\n          bot_text.innerHTML += text[index];\r\n          index++;\r\n        } else {\r\n          clearInterval(loadInterval);\r\n          loadInterval = null;\r\n        }\r\n      }, 100);\r\n    };\r\n\r\n    watch(answer, (cur, prev) => {\r\n      if (!_.isEmpty(cur)) {\r\n        clearInterval(loadInterval);\r\n        loadInterval = null;\r\n        onSplitBotAnswer(cur);\r\n      }\r\n      console.log(\"prev\", prev);\r\n    });\r\n\r\n    return { isBot, onLoadAnswer, loadInterval, onSplitBotAnswer };\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}