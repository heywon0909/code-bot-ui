{"ast":null,"code":"import ChatContent from \"./ChatContent.vue\";\nimport ChatInput from \"./ChatInput.vue\";\nimport { computed } from \"vue\";\nimport { useStore } from \"vuex\";\nimport generateUniqueId from \"../common/uniqueId\";\nexport default {\n  components: {\n    ChatContent,\n    ChatInput\n  },\n  setup() {\n    const store = useStore();\n    const getBotAnswer = params => {\n      let {\n        id,\n        question\n      } = params;\n      store.dispatch(\"getResponse\", {\n        id: id,\n        question: question\n      });\n    };\n    const getUserText = param => {\n      store.commit(\"setUserText\", {\n        id: generateUniqueId(),\n        question: param,\n        answer: \"\"\n      }, {\n        root: true\n      });\n    };\n    const isExist = computed(() => !_.isEmpty(chatList.value));\n    const chatList = computed(() => store.getters.getChatContent);\n    return {\n      chatList,\n      isExist,\n      getBotAnswer,\n      getUserText\n    };\n  }\n};","map":{"version":3,"mappings":"AAiCA,OAAOA,WAAU,MAAO,mBAAmB;AAC3C,OAAOC,SAAQ,MAAO,iBAAiB;AACvC,SAASC,QAAO,QAAS,KAAK;AAC9B,SAASC,QAAO,QAAS,MAAM;AAC/B,OAAOC,gBAAe,MAAO,oBAAoB;AACjD,eAAe;EACbC,UAAU,EAAE;IAAEL,WAAW;IAAEC;EAAU,CAAC;EACtCK,KAAK,GAAG;IACN,MAAMC,KAAI,GAAIJ,QAAQ,EAAE;IAExB,MAAMK,YAAW,GAAKC,MAAM,IAAK;MAC/B,IAAI;QAAEC,EAAE;QAAEC;MAAS,IAAIF,MAAM;MAE7BF,KAAK,CAACK,QAAQ,CAAC,aAAa,EAAE;QAC5BF,EAAE,EAAEA,EAAE;QACNC,QAAQ,EAAEA;MACZ,CAAC,CAAC;IACJ,CAAC;IAED,MAAME,WAAU,GAAKC,KAAK,IAAK;MAC7BP,KAAK,CAACQ,MAAM,CACV,aAAa,EACb;QAAEL,EAAE,EAAEN,gBAAgB,EAAE;QAAEO,QAAQ,EAAEG,KAAK;QAAEE,MAAM,EAAE;MAAG,CAAC,EACvD;QAAEC,IAAI,EAAE;MAAK,EACd;IACH,CAAC;IAED,MAAMC,OAAM,GAAIhB,QAAQ,CAAC,MAAM,CAACiB,CAAC,CAACC,OAAO,CAACC,QAAQ,CAACC,KAAK,CAAC,CAAC;IAC1D,MAAMD,QAAO,GAAInB,QAAQ,CAAC,MAAMK,KAAK,CAACgB,OAAO,CAACC,cAAc,CAAC;IAC7D,OAAO;MAAEH,QAAQ;MAAEH,OAAO;MAAEV,YAAY;MAAEK;IAAY,CAAC;EACzD;AACF,CAAC","names":["ChatContent","ChatInput","computed","useStore","generateUniqueId","components","setup","store","getBotAnswer","params","id","question","dispatch","getUserText","param","commit","answer","root","isExist","_","isEmpty","chatList","value","getters","getChatContent"],"sourceRoot":"","sources":["C:\\Users\\DESKTOP\\study\\tech-bot\\client\\src\\components\\ChatFrame.vue"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"bg-slate-800 w-2/3 md:w-2/3 rounded-md h-5/6 flex flex-col drop-shadow-xl\"\r\n  >\r\n    <!--header-->\r\n    <div\r\n      class=\"text-sky-500 text-xl font-semibold w-full p-3 h-20 border-b-2 flex\"\r\n    >\r\n      <p class=\"grow w-5/6 flex items-center\">CodeBot</p>\r\n      <div class=\"float-left grow-0 justify-center items-center flex space-x-3\">\r\n        <div class=\"w-2 h-2 bg-sky-500 rounded-full\"></div>\r\n        <div class=\"w-2 h-2 bg-sky-500 rounded-full\"></div>\r\n        <div class=\"w-2 h-2 bg-sky-500 rounded-full\"></div>\r\n      </div>\r\n    </div>\r\n    <!--chat-->\r\n    <div class=\"h-full overflow-y-auto\">\r\n      <template v-if=\"isExist\">\r\n        <div v-for=\"(chat, index) in chatList\" :key=\"index\">\r\n          <chat-content\r\n            :chat=\"chat\"\r\n            :index=\"index\"\r\n            @settingQnA=\"getBotAnswer\"\r\n          />\r\n        </div>\r\n      </template>\r\n    </div>\r\n    <!--input-->\r\n    <chat-input @settingUserText=\"getUserText\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ChatContent from \"./ChatContent.vue\";\r\nimport ChatInput from \"./ChatInput.vue\";\r\nimport { computed } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport generateUniqueId from \"../common/uniqueId\";\r\nexport default {\r\n  components: { ChatContent, ChatInput },\r\n  setup() {\r\n    const store = useStore();\r\n\r\n    const getBotAnswer = (params) => {\r\n      let { id, question } = params;\r\n\r\n      store.dispatch(\"getResponse\", {\r\n        id: id,\r\n        question: question,\r\n      });\r\n    };\r\n\r\n    const getUserText = (param) => {\r\n      store.commit(\r\n        \"setUserText\",\r\n        { id: generateUniqueId(), question: param, answer: \"\" },\r\n        { root: true }\r\n      );\r\n    };\r\n\r\n    const isExist = computed(() => !_.isEmpty(chatList.value));\r\n    const chatList = computed(() => store.getters.getChatContent);\r\n    return { chatList, isExist, getBotAnswer, getUserText };\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}